import{_ as s,c as a,o as i,R as n}from"./chunks/framework.D6kTAKe3.js";const t="/assets/coroutine.BXryP5kU.png",l="/assets/switch-thread-cost.hsQhEoms.jpg",e="/assets/switch-coroutine-cost.DZFzzcvk.jpg",D=JSON.parse('{"title":"Kotlin Coroutine 协程","description":"","frontmatter":{},"headers":[],"relativePath":"KOTLIN/Coroutine/Coroutine.md","filePath":"KOTLIN/Coroutine/Coroutine.md"}'),h={name:"KOTLIN/Coroutine/Coroutine.md"},p=n('<p>[TOC]</p><h1 id="kotlin-coroutine-协程" tabindex="-1">Kotlin Coroutine 协程 <a class="header-anchor" href="#kotlin-coroutine-协程" aria-label="Permalink to &quot;Kotlin Coroutine 协程&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Kotlin Coroutine 与一般概念的 Coroutine 不一样</span></span></code></pre></div><h2 id="通常意义的-coroutine" tabindex="-1">通常意义的 Coroutine <a class="header-anchor" href="#通常意义的-coroutine" aria-label="Permalink to &quot;通常意义的 Coroutine&quot;">​</a></h2><p><img src="'+t+'" alt="Coroutine"></p><h2 id="线程与通常意义协程的对比" tabindex="-1">线程与通常意义协程的对比 <a class="header-anchor" href="#线程与通常意义协程的对比" aria-label="Permalink to &quot;线程与通常意义协程的对比&quot;">​</a></h2><h3 id="切换开销对比" tabindex="-1">切换开销对比 <a class="header-anchor" href="#切换开销对比" aria-label="Permalink to &quot;切换开销对比&quot;">​</a></h3><p><img src="'+l+'" alt=""><img src="'+e+`" alt=""></p><h2 id="kotlin-里的-coroutine-与一般概念的-coroutine-不同" tabindex="-1">Kotlin 里的 Coroutine 与一般概念的 Coroutine 不同 <a class="header-anchor" href="#kotlin-里的-coroutine-与一般概念的-coroutine-不同" aria-label="Permalink to &quot;Kotlin 里的 Coroutine 与一般概念的 Coroutine 不同&quot;">​</a></h2><ul><li>一套 Kotlin 封装起来的<code>线程 API</code>，Kotlin Coroutine 就是线程</li><li>非阻塞式挂起：非阻塞式指的是用看起来阻塞的代码写出非阻塞性的操作，挂起的本质只是<code>切线程</code>，并且支持自动切线程</li></ul><h3 id="launch" tabindex="-1">launch <a class="header-anchor" href="#launch" aria-label="Permalink to &quot;launch&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>创建一个协程，并在指定线程上运行</span></span>
<span class="line"><span>Dispatchers.IO</span></span>
<span class="line"><span>Dispatchers.Main</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. IO 线程运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.IO) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // run background, e.g. update data to db</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 主线程运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.Main) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // run foreground, e.g. update UI</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. 多任务数据合并</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.Main) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getData1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getData2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> merged </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> suspendingMerge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data1, data2)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(merged)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4. 线程切换 - 写法 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.Main) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> withContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.IO) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // run on IO thread</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // now back to UI thread: switch thread automatically</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // use data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5. 线程切换 - 写法 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.Main) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> suspendingGetData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // use data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> suspendingGetData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  withContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.IO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ol><li><a href="https://zhuanlan.zhihu.com/p/172471249" target="_blank" rel="noreferrer">知乎大佬</a></li><li><a href="https://www.ixigua.com/6846651601583604238?logTag=913c722a7192cbe6470f" target="_blank" rel="noreferrer">扔物线</a></li><li><a href="https://www.jianshu.com/p/9f720b9ccdea" target="_blank" rel="noreferrer">简书</a></li></ol>`,15),k=[p];function r(o,d,c,g,E,u){return i(),a("div",null,k)}const F=s(h,[["render",r]]);export{D as __pageData,F as default};
