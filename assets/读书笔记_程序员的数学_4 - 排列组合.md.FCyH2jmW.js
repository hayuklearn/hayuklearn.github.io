import{_ as a,c as e,o as r,R as t}from"./chunks/framework.D6kTAKe3.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"读书笔记/程序员的数学/4 - 排列组合.md","filePath":"读书笔记/程序员的数学/4 - 排列组合.md"}'),o={name:"读书笔记/程序员的数学/4 - 排列组合.md"},i=t('<h2 id="《程序员的数学》读书笔记目录" tabindex="-1">《程序员的数学》读书笔记目录 <a class="header-anchor" href="#《程序员的数学》读书笔记目录" aria-label="Permalink to &quot;《程序员的数学》读书笔记目录&quot;">​</a></h2><ul><li><a href="http://www.jianshu.com/p/c386642800cb" target="_blank" rel="noreferrer">0的作用</a></li><li><a href="http://www.jianshu.com/p/f2286fac8c36" target="_blank" rel="noreferrer">罗马计数法</a></li><li><a href="http://www.jianshu.com/p/a379eb1870e7" target="_blank" rel="noreferrer">余数的运用</a></li><li><a href="http://www.jianshu.com/p/23d50c142706" target="_blank" rel="noreferrer">逻辑运算</a></li><li><a href="http://www.jianshu.com/p/491ed19e119e" target="_blank" rel="noreferrer">排列组合</a></li><li><a href="http://www.jianshu.com/p/3eb3f4e9179b" target="_blank" rel="noreferrer">归纳与递归</a></li></ul><h2 id="认清计数对象" tabindex="-1">认清计数对象 <a class="header-anchor" href="#认清计数对象" aria-label="Permalink to &quot;认清计数对象&quot;">​</a></h2><h3 id="工具-树状图" tabindex="-1">工具--树状图 <a class="header-anchor" href="#工具-树状图" aria-label="Permalink to &quot;工具--树状图&quot;">​</a></h3><h2 id="集合" tabindex="-1">集合 <a class="header-anchor" href="#集合" aria-label="Permalink to &quot;集合&quot;">​</a></h2><h3 id="加法法则" tabindex="-1">加法法则 <a class="header-anchor" href="#加法法则" aria-label="Permalink to &quot;加法法则&quot;">​</a></h3><p>集合间没有重复元素时 $$ |A ∪ B| = |A| + |B| $$</p><h4 id="容斥原理" tabindex="-1">容斥原理 <a class="header-anchor" href="#容斥原理" aria-label="Permalink to &quot;容斥原理&quot;">​</a></h4><p>$$ |A ∪ B| = |A| + |B| - |A ∩ B| $$</p><h3 id="乘法法则" tabindex="-1">乘法法则 <a class="header-anchor" href="#乘法法则" aria-label="Permalink to &quot;乘法法则&quot;">​</a></h3><p>$$ |A × B| = |A| × |B| $$</p><h2 id="置换-substitution" tabindex="-1">置换（substitution） <a class="header-anchor" href="#置换-substitution" aria-label="Permalink to &quot;置换（substitution）&quot;">​</a></h2><p>将N个事物<strong>按顺序</strong>进行排列</p><p>$$ P^N_N = N! $$</p><h3 id="阶乘-factorial" tabindex="-1">阶乘（factorial） <a class="header-anchor" href="#阶乘-factorial" aria-label="Permalink to &quot;阶乘（factorial）&quot;">​</a></h3><h2 id="排列-permutation" tabindex="-1">排列（permutation） <a class="header-anchor" href="#排列-permutation" aria-label="Permalink to &quot;排列（permutation）&quot;">​</a></h2><p>从N个事物中取K个<strong>按顺序</strong>进行排列</p><p>$$ P^N_K = \\dfrac{N!}{(N - K)!} $$</p><h2 id="组合-combination" tabindex="-1">组合（combination） <a class="header-anchor" href="#组合-combination" aria-label="Permalink to &quot;组合（combination）&quot;">​</a></h2><p><strong>不考虑顺序</strong></p><p>首先按顺序排列计数，然后除以重复度</p><p>$$ C^K_N = \\dfrac{P^K_N}{P^K_K} $$</p><h2 id="置换、排列与组合的关系" tabindex="-1">置换、排列与组合的关系 <a class="header-anchor" href="#置换、排列与组合的关系" aria-label="Permalink to &quot;置换、排列与组合的关系&quot;">​</a></h2><p>置换与组合的结合就是排列</p><p>$$ P^K_N = P^K_K × C^K_N $$</p><hr>',26),n=[i];function l(h,s,c,d,p,u){return r(),e("div",null,n)}const f=a(o,[["render",l]]);export{b as __pageData,f as default};
