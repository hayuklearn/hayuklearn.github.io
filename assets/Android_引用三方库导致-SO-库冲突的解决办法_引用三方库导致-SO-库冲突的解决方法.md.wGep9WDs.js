import{_ as a,c as s,o as i,R as n}from"./chunks/framework.D6kTAKe3.js";const k=JSON.parse('{"title":"Android 开发之引用三方库导致 SO 库冲突的解决办法","description":"","frontmatter":{},"headers":[],"relativePath":"Android/引用三方库导致-SO-库冲突的解决办法/引用三方库导致-SO-库冲突的解决方法.md","filePath":"Android/引用三方库导致-SO-库冲突的解决办法/引用三方库导致-SO-库冲突的解决方法.md"}'),e={name:"Android/引用三方库导致-SO-库冲突的解决办法/引用三方库导致-SO-库冲突的解决方法.md"},t=n(`<h1 id="android-开发之引用三方库导致-so-库冲突的解决办法" tabindex="-1">Android 开发之引用三方库导致 SO 库冲突的解决办法 <a class="header-anchor" href="#android-开发之引用三方库导致-so-库冲突的解决办法" aria-label="Permalink to &quot;Android 开发之引用三方库导致 SO 库冲突的解决办法&quot;">​</a></h1><div class="language-gradle vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gradle</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>packagingOptions {</span></span>
<span class="line"><span>  pickFirst &#39;lib/armeabi-v7a/libc++_shared.so&#39;</span></span>
<span class="line"><span>  pickFirst &#39;lib/arm64-v8a/libc++_shared.so&#39;</span></span>
<span class="line"><span>  pickFirst &#39;lib/x86/libc++_shared.so&#39;</span></span>
<span class="line"><span>  pickFirst &#39;lib/x86_64/libc++_shared.so&#39;  </span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="packagingoptions-常见的设置项" tabindex="-1">packagingOptions 常见的设置项 <a class="header-anchor" href="#packagingoptions-常见的设置项" aria-label="Permalink to &quot;packagingOptions 常见的设置项&quot;">​</a></h2><ol><li>exclude - 过滤掉某些文件或者目录不添加到APK中，作用于APK，不能过滤aar和jar中的内容</li><li>pickFirst - 匹配到多个相同文件，只提取第一个，作用于APK，不能过滤aar和jar中的文件</li><li>doNotStrip - 可以设置某些动态库不被优化压缩</li><li>merge - 将匹配的文件都添加到APK中，和pickFirst有些相反，会合并所有文件</li></ol>`,4),o=[t];function p(r,l,c,d,_,h){return i(),s("div",null,o)}const b=a(e,[["render",p]]);export{k as __pageData,b as default};
